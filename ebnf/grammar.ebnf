Doc = ContextOrTypeDefinition* .
ContextOrTypeDefinition = Context | TypeDecl .
Context = KeywordContext Ident ("{" ToDo? Definition? TypeDecl* "}")? .
KeywordContext = ("context" | "Kontext") .
Ident = <name> .
ToDo = KeywordTodo ToDoText .
KeywordTodo = "TODO" .
ToDoText = <text> .
Definition = <text> .
TypeDecl = Data | Workflow .
Data = KeywordData Ident ("{" ToDo? Definition? (TypeDef ("und" TypeDef)* ("oder" TypeDef)*)? "}")? .
KeywordData = ("data" | "Daten") .
TypeDef = Ident ("[" TypeDef ("," TypeDef)* "]")? .
Workflow = KeywordWorkflow Ident ("{" ToDo? Definition? Stmts? "}")? .
KeywordWorkflow = ("workflow" | "Arbeitsablauf") .
Stmts = Stmt* .
Stmt = IfStmt | EventStmt | EventSentStmt | ActivityStmt | ActorStmt | ContextStmt | ToDo | ReturnStmt | ReturnErrorStmt | WhileStmt | ("{" Stmts "}") .
IfStmt = KeywordDecision KeywordIf Literal KeywordThen Stmt (KeywordElse Stmt)? .
KeywordDecision = ("decision" | "Entscheidung") .
KeywordIf = ("if" | "wenn") .
Literal = <text> .
KeywordThen = ("then" | "dann") .
KeywordElse = ("else" | "sonst") .
EventStmt = KeywordEvent IdentOrLiteral .
KeywordEvent = ("event" | "Ereignis") .
IdentOrLiteral = (Ident | Literal) .
EventSentStmt = KeywordEventSent IdentOrLiteral .
KeywordEventSent = ("sent" | "Zwischenereignis") .
ActivityStmt = KeywordActivity IdentOrLiteral ("{" ViewStmt? InputStmt? OutputStmt? "}")? .
KeywordActivity = ("step" | "Aufgabe") .
ViewStmt = KeywordView IdentOrLiteral .
KeywordView = ("view" | "Ansicht") .
InputStmt = KeywordInput IdentOrLiteral .
KeywordInput = ("input" | "Eingabe") .
OutputStmt = KeywordOutput IdentOrLiteral .
KeywordOutput = ("output" | "Ausgabe") .
ActorStmt = KeywordActor IdentOrLiteral "{" Stmts "}" .
KeywordActor = ("actor" | "Akteur") .
ContextStmt = KeywordContext Ident "{" Stmts "}" .
ReturnStmt = KeywordReturn IdentOrLiteral? .
KeywordReturn = ("return" | "Endereignis") .
ReturnErrorStmt = KeywordReturnError IdentOrLiteral? .
KeywordReturnError = ("error" | "Fehler") .
WhileStmt = KeywordWhile Literal Stmt .
KeywordWhile = ("while" | ("Wiederholung" "solange")) .
